# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - test
  - build
  - deploy

test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  image: python:3.10
  before_script:
    - pip install -r requirements.txt
    - pip install pytest
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - python -m pytest

build-job:       # This job runs in the build stage, which runs first.
    image: docker:cli
    stage: build
    services:
        - docker:dind
    variables:
        DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    before_script:
        - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)
    # Default branch is also tagged with `latest`
    script:
        - docker build --pull -t "$DOCKER_IMAGE_NAME" .
        - docker push "$DOCKER_IMAGE_NAME"
        - |
            if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
                docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
                docker push "$CI_REGISTRY_IMAGE:latest"
            fi
        # Run this job in a branch where a Dockerfile exists
    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


deploy-job:
    stage: deploy
    image: alpine
    before_script:
        # install envsubst and ssh-add
        - apk add gettext openssh-client
    script:
        # start ssh-agent and import ssh private key
        - eval `ssh-agent`
        - ssh-add <(echo "$SSH_PRIVATE_KEY")
        # add server to list of known hosts
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - touch ~/.ssh/known_hosts
        - chmod 600 ~/.ssh/known_hosts
        - echo $SSH_HOST_KEY >> ~/.ssh/known_hosts
        - echo "HOST *" > ~/.ssh/config
        - echo "StrictHostKeyChecking no" >> ~/.ssh/config
        # upload docker-compose to the server
        - scp compose.prod.yaml ec2-user@$DEPLOY_TARGET:/home/ec2-user/compose.yaml
        - ssh ec2-user@$DEPLOY_TARGET "cd /home/ec2-user; 
            docker login -u $CI_REGISTRY_USER 
                -p $CI_REGISTRY_PASSWORD $CI_REGISTRY;
            docker compose pull;
            docker compose up -d"
    rules:
        # only deploy if new commit on main-branch
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

